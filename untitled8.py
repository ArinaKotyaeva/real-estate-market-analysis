# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GQf7HBbjHWEog1D0QzzH8kZIfEWJfwda
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import plotly.express as px
from datetime import datetime

sns.set_theme(style="whitegrid")  # Вместо plt.style.use('seaborn')

pd.set_option('display.max_columns', None)
plt.rcParams['figure.figsize'] = (12, 6)

np.random.seed(42)
num_samples = 1000

districts = ['Центральный', 'Северный', 'Южный', 'Западный', 'Восточный'] * (num_samples // 5)
rooms = np.random.randint(1, 5, num_samples)
area = np.round(np.random.normal(60, 20, num_samples), 1)
area = np.clip(area, 20, 120)
floor = np.random.randint(1, 25, num_samples)
total_floors = floor + np.random.randint(0, 5, num_samples)
prices = area * 100000 + rooms * 500000 + np.random.randint(-200000, 200000, num_samples)
prices = np.abs(prices).astype(int)
dates = pd.date_range('2020-01-01', '2023-12-31', periods=num_samples)

data = pd.DataFrame({
    'district': districts,
    'rooms': rooms,
    'area': area,
    'floor': floor,
    'total_floors': total_floors,
    'price': prices,
    'date': dates,
    'price_per_sqm': prices / area
})

outliers = pd.DataFrame({
    'district': ['Центральный', 'Центральный'],
    'rooms': [3, 4],
    'area': [150, 200],
    'floor': [10, 15],
    'total_floors': [25, 25],
    'price': [50000000, 75000000],
    'date': [datetime(2023, 1, 1), datetime(2023, 6, 1)],
    'price_per_sqm': [333333, 375000]
})

data = pd.concat([data, outliers], ignore_index=True)
data.to_csv('real_estate_data.csv', index=False)

try:
    df = pd.read_csv('real_estate_data.csv', parse_dates=['date'])
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month
except FileNotFoundError:
    df = data.copy()
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month

print("Первые 5 строк данных:")
print(df.head())
print("\nИнформация о данных:")
print(df.info())
print("\nОписательная статистика:")
print(df.describe())
print("\nПропущенные значения:")
print(df.isnull().sum())

price_threshold = df['price'].quantile(0.99)
df = df[df['price'] <= price_threshold]

plt.figure()
sns.histplot(df['price'], bins=50, kde=True)
plt.title('Распределение цен на недвижимость')
plt.xlabel('Цена (руб)')
plt.ylabel('Количество')
plt.ticklabel_format(style='plain', axis='x')
plt.grid(True)
plt.show()
plt.figure()
sns.histplot(df['price_per_sqm'], bins=50, kde=True)
plt.title('Распределение цен за квадратный метр')
plt.xlabel('Цена за кв.м (руб)')
plt.ylabel('Количество')
plt.grid(True)
plt.show()
plt.figure(figsize=(10, 8))
corr_matrix = df.corr(numeric_only=True)
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, fmt=".2f")
plt.title('Корреляционная матрица')
plt.tight_layout()
plt.show()


plt.figure()
district_avg = df.groupby('district')['price'].mean().sort_values(ascending=False)
sns.barplot(x=district_avg.index, y=district_avg.values)
plt.title('Средняя цена по районам')
plt.xlabel('Район')
plt.ylabel('Средняя цена (руб)')
plt.xticks(rotation=45)
plt.ticklabel_format(style='plain', axis='y')
plt.grid(True)
plt.tight_layout()
plt.show()
plt.figure()
sns.boxplot(x='district', y='price', data=df)
plt.title('Распределение цен по районам')
plt.xlabel('Район')
plt.ylabel('Цена (руб)')
plt.xticks(rotation=45)
plt.ticklabel_format(style='plain', axis='y')
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure()
scatter = sns.scatterplot(x='area', y='price', hue='rooms', size='rooms',
                         sizes=(20, 200), data=df, palette='viridis')
plt.title('Зависимость цены от площади и количества комнат')
plt.xlabel('Площадь (кв.м)')
plt.ylabel('Цена (руб)')
plt.ticklabel_format(style='plain', axis='y')
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure()
yearly_trend = df.groupby('year')['price'].mean()
sns.lineplot(x=yearly_trend.index, y=yearly_trend.values, marker='o')
plt.title('Динамика средних цен по годам')
plt.xlabel('Год')
plt.ylabel('Средняя цена (руб)')
plt.ticklabel_format(style='plain', axis='y')
plt.grid(True)
plt.show()

plt.figure()
sns.boxplot(x='rooms', y='price', data=df)
plt.title('Распределение цен по количеству комнат')
plt.xlabel('Количество комнат')
plt.ylabel('Цена (руб)')
plt.ticklabel_format(style='plain', axis='y')
plt.grid(True)
plt.show()


X = df[['area', 'price', 'rooms']]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
df['cluster'] = kmeans.fit_predict(X_scaled)

plt.figure()
scatter = sns.scatterplot(x='area', y='price', hue='cluster', style='rooms',
                         palette='viridis', data=df, s=100)
plt.title('Кластеризация недвижимости по площади, цене и количеству комнат')
plt.xlabel('Площадь (кв.м)')
plt.ylabel('Цена (руб)')
plt.ticklabel_format(style='plain', axis='y')
plt.grid(True)
plt.show()
print("\nХарактеристики кластеров:")
print(df.groupby('cluster')[['area', 'price', 'rooms']].mean())

try:
    import plotly.express as px
    fig = px.scatter(df, x='area', y='price', color='district', size='rooms',
                    hover_data=['floor', 'total_floors'],
                    title='Интерактивная визуализация цен на недвижимость')
    fig.show()
    district_summary = df.groupby('district').agg({
        'price': 'mean',
        'price_per_sqm': 'mean',
        'area': 'mean',
        'rooms': 'mean'
    }).reset_index()

    fig = px.bar(district_summary, x='district', y='price',
                color='price_per_sqm',
                title='Средние цены по районам с цветовой индикацией цены за кв.м',
                labels={'price': 'Средняя цена', 'district': 'Район'},
                hover_data=['price_per_sqm', 'area', 'rooms'])
    fig.show()
except ImportError:
    print("\nДля интерактивной визуализации установите библиотеку plotly: pip install plotly")

top_expensive = df.nlargest(10, 'price_per_sqm')[['district', 'area', 'rooms', 'price', 'price_per_sqm']]
top_cheap = df.nsmallest(10, 'price_per_sqm')[['district', 'area', 'rooms', 'price', 'price_per_sqm']]

print("\nТоп 10 самых дорогих предложений за кв.м:")
print(top_expensive)
print("\nТоп 10 самых дешевых предложений за кв.м:")
print(top_cheap)

plt.figure()
sns.boxplot(x='district', y='price_per_sqm', data=df)
plt.title('Распределение цены за квадратный метр по районам')
plt.xlabel('Район')
plt.ylabel('Цена за кв.м (руб)')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

